#user  nginx;
load_module modules/ndk_http_module.so;
load_module modules/ngx_http_lua_module.so;
worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format bodylog '$remote_addr - $remote_user [$time_local] '
    '"$request" $status $body_bytes_sent '
    '"$http_referer" "$http_user_agent" $request_time '
    '\n\n"$req_headers" \n"$req_body" \n>"$resp_body"';

    log_format logger-json escape=json '{"source": "nginx", "time": $msec, "resp_body_size": $body_bytes_sent, "host": "$http_host", "address": "$remote_addr", "request_length": $request_length, "method": "$request_method", "uri": "$request_uri", "status": $status,  "user_agent": "$http_user_agent", "resp_time": $request_time, "upstream_addr": "$upstream_addr", "req_headers": "$req_headers", "req_body": "$req_body", "resp_body": "$resp_body"}';

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

  server {
    listen       80;
    server_name _;

    access_log  /var/log/nginx/hs1.access.log  logger-json;

    location / {
        proxy_pass http://172.18.0.4:8008;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Host $http_host;
        proxy_redirect off;
    }

    lua_need_request_body on;

    set $resp_body "";
    set $req_body "";
    set $req_headers "";

    client_body_buffer_size 16k;
    client_max_body_size 16k;

    rewrite_by_lua_block {
        local req_headers = {};
        ngx.var.req_body = ngx.req.get_body_data();
        local h, err = ngx.req.get_headers()
        for k, v in pairs(h) do
            table.insert(req_headers, '"' ..  k .. '": "' .. v .. '"');
        end

        ngx.var.req_headers = "{" .. table.concat(req_headers, ",") .. " }";
    }

    body_filter_by_lua '
    local resp_body = string.sub(ngx.arg[1], 1, 1000)
    ngx.ctx.buffered = (ngx.ctx.buffered or "") .. resp_body
    if ngx.arg[2] then
      ngx.var.resp_body = ngx.ctx.buffered
    end
    ';
  }
}
